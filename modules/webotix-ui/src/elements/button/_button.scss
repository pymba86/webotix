@import "../../styles/foundation";
@import "../../styles/elements";

/*
Button

Markup:

<a role="button" class="button {{.modifier}}" {{:modifier}} tabindex="0">Anchor</a>
<button type="button" class="button icon-add {{.modifier}}" {{:modifier}}>Button</button>

:disabled - Disabled state
.active - Active appearance
.disabled - Disabled appearance
.intent-primary - Primary intent
.intent-success - Success intent
.intent-warning - Warning intent
.intent-danger - Danger intent
.minimal - More subtle appearance
.large - Larger size
.small - Smaller size
.fill - Fill parent container

Styleguide button

*/

.button {
  @include button-base();
  @include button-height($button-height);

  &:empty {
    padding: 0 !important;
  }

  &:disabled,
  &.disabled {
    cursor: not-allowed;
  }

  &.fill {
    display: flex;
    width: 100%;
  }

  &.align-right,
  .align-right & {
    text-align: right;
  }

  &.align-left,
  .align-left & {
    text-align: left;
  }

  // default styles
  &:not([class*="intent-"]) {
    @include button();
  }

  // intents
  @each $intent, $colors in $button-intents {
    &.intent-#{$intent} {
      @include button-intent($colors...);
    }
  }

  &[class*="intent-"] .button-spinner .spinner-head {
    stroke: $white;
  }

  // size modifiers
  &.large,
  .large & {
    @include button-height-large();
  }

  &.small,
  .small & {
    @include button-height-small();
  }

  // loading state
  &.loading {
    position: relative;

    &[class*="icon-"]::before {
      visibility: hidden;
    }

    .button-spinner {
      // spinner appears centered within button
      position: absolute;
      margin: 0;
    }

    > :not(.button-spinner) {
      visibility: hidden;
    }
  }


  // button with SVG icon only (no text or children)
  .icon:first-child:last-child,
    // if loading, then it contains exactly [spinner, icon]
  .spinner + .icon:last-child {
    // center icon horizontally. this works for large buttons too.
    margin: 0 (-($button-height - $icon-size-standard) / 2);
  }

  // minimal must come last to override all default styles
  &.minimal {
    @include button-minimal();
  }
}

a.button {
  text-align: center;
  text-decoration: none;
  transition: none;

  &,
  &:hover,
  &:active {
    // override global 'a' styles
    color: $text-color;
  }

  &.disabled {
    color: $button-color-disabled;
  }
}

.button-text {
  // default: don't grow to fill but allow shrinking as necessary
  flex: 0 1 auto;
}

// when alignment is set, grow to fill and inherit `text-align` set on `.button`
.button,
.button-group {
  &.align-left,
  &.align-right {
    .button-text {
      flex: 1 1 auto;
    }
  }
}

