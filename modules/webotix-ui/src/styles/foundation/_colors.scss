@import "utilities";

///
/// Color data
///
/// Shopify color palette, extended specifically for polaris-react.
///
/// @type map

$color-base-palette-data: (
        'purple': (
                'text': rgb(80, 73, 90),
                'darker': rgb(35, 0, 81),
                'dark': rgb(80, 36, 143),
                'base': rgb(156, 106, 222),
                'light': rgb(227, 208, 255),
                'lighter': rgb(246, 240, 253),
        ),
        'indigo': (
                'text': rgb(62, 65, 85),
                'darker': rgb(0, 6, 57),
                'dark': rgb(32, 46, 120),
                'base': rgb(92, 106, 196),
                'light': rgb(179, 188, 245),
                'lighter': rgb(244, 245, 250),
        ),
        'blue': (
                'text': rgb(62, 78, 87),
                'darker': rgb(0, 20, 41),
                'dark': rgb(8, 78, 138),
                'base': rgb(0, 111, 187),
                'light': rgb(180, 225, 250),
                'lighter': rgb(235, 245, 250),
        ),
        'teal': (
                'text': rgb(64, 83, 82),
                'darker': rgb(0, 49, 53),
                'dark': rgb(0, 132, 142),
                'base': rgb(71, 193, 191),
                'light': rgb(183, 236, 236),
                'lighter': rgb(224, 245, 245),
        ),
        'green': (
                'text': rgb(65, 79, 62),
                'darker': rgb(23, 54, 48),
                'dark': rgb(16, 128, 67),
                'base': rgb(80, 184, 60),
                'light': rgb(187, 229, 179),
                'lighter': rgb(227, 241, 223),
        ),
        'yellow': (
                'text': rgb(89, 81, 48),
                'darker': rgb(87, 59, 0),
                'dark': rgb(138, 97, 22),
                'base': rgb(238, 194, 0),
                'light': rgb(255, 234, 138),
                'lighter': rgb(252, 241, 205),
        ),
        'orange': (
                'text': rgb(89, 68, 48),
                'darker': rgb(74, 21, 4),
                'dark': rgb(192, 87, 23),
                'base': rgb(244, 147, 66),
                'light': rgb(255, 197, 139),
                'lighter': rgb(252, 235, 219),
        ),
        'red': (
                'text': rgb(88, 60, 53),
                'darker': rgb(51, 1, 1),
                'dark': rgb(191, 7, 17),
                'base': rgb(222, 54, 24),
                'light': rgb(254, 173, 154),
                'lighter': rgb(251, 234, 229),
        ),
        'ink': (
                'base': rgb(33, 43, 54),
                'light': rgb(69, 79, 91),
                'lighter': rgb(99, 115, 129),
                'lightest': rgb(145, 158, 171),
        ),
        'sky': (
                'dark': rgb(196, 205, 213),
                'base': rgb(223, 227, 232),
                'light': rgb(244, 246, 248),
                'lighter': rgb(249, 250, 251),
        ),
        'black': (
                'base': rgb(0, 0, 0),
        ),
        'white': (
                'base': rgb(255, 255, 255),
        ),
);


// Add state colors to the palette
$color-palette-data: map-extend(
                $color-base-palette-data,
                (
                        'state': (
                                'hover': rgba(223, 227, 232, 0.3),
                                'focused': rgba(223, 227, 232, 0.3),
                                'active': rgba(179, 188, 245, 0.1),
                                'selected': rgba(179, 188, 245, 0.15),
                                'subdued': rgba(249, 250, 251, 1),
                                'disabled': rgba(249, 250, 251, 1),
                                'hover-destructive': rgba(251, 234, 229, 0.4),
                                'focused-destructive': rgba(251, 234, 229, 0.4),
                                'active-destructive': rgba(220, 56, 37, 0.03),
                        ),
                )
);

/// Darkens the foreground color by the background color. This is the same as
/// the "multiply" filter in graphics apps.
///
/// @param {Color} $foreground - The color to darken.
/// @param {Color} $background - The background to base darkening on.
/// @return {Color} The modified color.

@function color-multiply($foreground, $background: null) {
  @if $background == null {
    $background: rgb(255, 255, 255);
  }

  $red: red($background) * red($foreground) / 255;
  $green: green($background) * green($foreground) / 255;
  $blue: blue($background) * blue($foreground) / 255;

  $opacity: opacity($foreground);
  $background-opacity: opacity($background);

  // calculate opacity
  $bm-red: $red * $opacity + red($background) * $background-opacity *
    (1 - $opacity);
  $bm-green: $green * $opacity + green($background) * $background-opacity *
    (1 - $opacity);
  $bm-blue: $blue * $opacity + blue($background) * $background-opacity *
    (1 - $opacity);

  @return rgb($bm-red, $bm-green, $bm-blue);
}

/// Returns the color value for a given color name and group.
///
/// @param {String} $hue - The colorâ€™s hue.
/// @param {String} $value - The darkness/lightness of the color. Defaults to
/// base.
/// @param {Color} $for-background - The background color on which this color
/// will appear. Applies a multiply filter to ensure appropriate contrast.
/// @return {Color} The color value.

@function color($hue, $value: base, $for-background: null) {
  $fetched-color: map-get(map-get($color-palette-data, $hue), $value);

  @if map-has-key($color-palette-data, $fetched-color) {
    $fetched-color: map-get(
                    map-get($color-palette-data, $fetched-color),
                    $value
    );
  }

  @if $for-background != null {
    $fetched-color: color-multiply($fetched-color, $for-background);
  }

  @if type-of($fetched-color) == color {
    @return $fetched-color;
  } @else {
    // stylelint-disable string-no-newline
    $error: "
Color `#{$hue}, #{$value}` not found. Make sure arguments are strings.
GOOD: color('yellow')
BAD: color(yellow)
Available options: #{available-names($color-palette-data)}
";
    // stylelint-enable

    @error $error;
  }
}
